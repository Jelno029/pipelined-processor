// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/04/2023 17:04:39"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    enreg32bit
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module enreg32bit_vlg_sample_tst(
	i_clk,
	i_clr,
	i_enload,
	i_pinput,
	sampler_tx
);
input  i_clk;
input  i_clr;
input  i_enload;
input [31:0] i_pinput;
output sampler_tx;

reg sample;
time current_time;
always @(i_clk or i_clr or i_enload or i_pinput)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module enreg32bit_vlg_check_tst (
	o_poutput,
	sampler_rx
);
input [31:0] o_poutput;
input sampler_rx;

reg [31:0] o_poutput_expected;

reg [31:0] o_poutput_prev;

reg [31:0] o_poutput_expected_prev;

reg [31:0] last_o_poutput_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	o_poutput_prev = o_poutput;
end

// update expected /o prevs

always @(trigger)
begin
	o_poutput_expected_prev = o_poutput_expected;
end


// expected o_poutput[ 31 ]
initial
begin
	o_poutput_expected[31] = 1'bX;
end 
// expected o_poutput[ 30 ]
initial
begin
	o_poutput_expected[30] = 1'bX;
end 
// expected o_poutput[ 29 ]
initial
begin
	o_poutput_expected[29] = 1'bX;
end 
// expected o_poutput[ 28 ]
initial
begin
	o_poutput_expected[28] = 1'bX;
end 
// expected o_poutput[ 27 ]
initial
begin
	o_poutput_expected[27] = 1'bX;
end 
// expected o_poutput[ 26 ]
initial
begin
	o_poutput_expected[26] = 1'bX;
end 
// expected o_poutput[ 25 ]
initial
begin
	o_poutput_expected[25] = 1'bX;
end 
// expected o_poutput[ 24 ]
initial
begin
	o_poutput_expected[24] = 1'bX;
end 
// expected o_poutput[ 23 ]
initial
begin
	o_poutput_expected[23] = 1'bX;
end 
// expected o_poutput[ 22 ]
initial
begin
	o_poutput_expected[22] = 1'bX;
end 
// expected o_poutput[ 21 ]
initial
begin
	o_poutput_expected[21] = 1'bX;
end 
// expected o_poutput[ 20 ]
initial
begin
	o_poutput_expected[20] = 1'bX;
end 
// expected o_poutput[ 19 ]
initial
begin
	o_poutput_expected[19] = 1'bX;
end 
// expected o_poutput[ 18 ]
initial
begin
	o_poutput_expected[18] = 1'bX;
end 
// expected o_poutput[ 17 ]
initial
begin
	o_poutput_expected[17] = 1'bX;
end 
// expected o_poutput[ 16 ]
initial
begin
	o_poutput_expected[16] = 1'bX;
end 
// expected o_poutput[ 15 ]
initial
begin
	o_poutput_expected[15] = 1'bX;
end 
// expected o_poutput[ 14 ]
initial
begin
	o_poutput_expected[14] = 1'bX;
end 
// expected o_poutput[ 13 ]
initial
begin
	o_poutput_expected[13] = 1'bX;
end 
// expected o_poutput[ 12 ]
initial
begin
	o_poutput_expected[12] = 1'bX;
end 
// expected o_poutput[ 11 ]
initial
begin
	o_poutput_expected[11] = 1'bX;
end 
// expected o_poutput[ 10 ]
initial
begin
	o_poutput_expected[10] = 1'bX;
end 
// expected o_poutput[ 9 ]
initial
begin
	o_poutput_expected[9] = 1'bX;
end 
// expected o_poutput[ 8 ]
initial
begin
	o_poutput_expected[8] = 1'bX;
end 
// expected o_poutput[ 7 ]
initial
begin
	o_poutput_expected[7] = 1'bX;
end 
// expected o_poutput[ 6 ]
initial
begin
	o_poutput_expected[6] = 1'bX;
end 
// expected o_poutput[ 5 ]
initial
begin
	o_poutput_expected[5] = 1'bX;
end 
// expected o_poutput[ 4 ]
initial
begin
	o_poutput_expected[4] = 1'bX;
end 
// expected o_poutput[ 3 ]
initial
begin
	o_poutput_expected[3] = 1'bX;
end 
// expected o_poutput[ 2 ]
initial
begin
	o_poutput_expected[2] = 1'bX;
end 
// expected o_poutput[ 1 ]
initial
begin
	o_poutput_expected[1] = 1'bX;
end 
// expected o_poutput[ 0 ]
initial
begin
	o_poutput_expected[0] = 1'bX;
end 
// generate trigger
always @(o_poutput_expected or o_poutput)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected o_poutput = %b | ",o_poutput_expected_prev);
	$display("| real o_poutput = %b | ",o_poutput_prev);
`endif
	if (
		( o_poutput_expected_prev[0] !== 1'bx ) && ( o_poutput_prev[0] !== o_poutput_expected_prev[0] )
		&& ((o_poutput_expected_prev[0] !== last_o_poutput_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_poutput[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_poutput_expected_prev);
		$display ("     Real value = %b", o_poutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_o_poutput_exp[0] = o_poutput_expected_prev[0];
	end
	if (
		( o_poutput_expected_prev[1] !== 1'bx ) && ( o_poutput_prev[1] !== o_poutput_expected_prev[1] )
		&& ((o_poutput_expected_prev[1] !== last_o_poutput_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_poutput[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_poutput_expected_prev);
		$display ("     Real value = %b", o_poutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_o_poutput_exp[1] = o_poutput_expected_prev[1];
	end
	if (
		( o_poutput_expected_prev[2] !== 1'bx ) && ( o_poutput_prev[2] !== o_poutput_expected_prev[2] )
		&& ((o_poutput_expected_prev[2] !== last_o_poutput_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_poutput[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_poutput_expected_prev);
		$display ("     Real value = %b", o_poutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_o_poutput_exp[2] = o_poutput_expected_prev[2];
	end
	if (
		( o_poutput_expected_prev[3] !== 1'bx ) && ( o_poutput_prev[3] !== o_poutput_expected_prev[3] )
		&& ((o_poutput_expected_prev[3] !== last_o_poutput_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_poutput[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_poutput_expected_prev);
		$display ("     Real value = %b", o_poutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_o_poutput_exp[3] = o_poutput_expected_prev[3];
	end
	if (
		( o_poutput_expected_prev[4] !== 1'bx ) && ( o_poutput_prev[4] !== o_poutput_expected_prev[4] )
		&& ((o_poutput_expected_prev[4] !== last_o_poutput_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_poutput[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_poutput_expected_prev);
		$display ("     Real value = %b", o_poutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_o_poutput_exp[4] = o_poutput_expected_prev[4];
	end
	if (
		( o_poutput_expected_prev[5] !== 1'bx ) && ( o_poutput_prev[5] !== o_poutput_expected_prev[5] )
		&& ((o_poutput_expected_prev[5] !== last_o_poutput_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_poutput[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_poutput_expected_prev);
		$display ("     Real value = %b", o_poutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_o_poutput_exp[5] = o_poutput_expected_prev[5];
	end
	if (
		( o_poutput_expected_prev[6] !== 1'bx ) && ( o_poutput_prev[6] !== o_poutput_expected_prev[6] )
		&& ((o_poutput_expected_prev[6] !== last_o_poutput_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_poutput[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_poutput_expected_prev);
		$display ("     Real value = %b", o_poutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_o_poutput_exp[6] = o_poutput_expected_prev[6];
	end
	if (
		( o_poutput_expected_prev[7] !== 1'bx ) && ( o_poutput_prev[7] !== o_poutput_expected_prev[7] )
		&& ((o_poutput_expected_prev[7] !== last_o_poutput_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_poutput[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_poutput_expected_prev);
		$display ("     Real value = %b", o_poutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_o_poutput_exp[7] = o_poutput_expected_prev[7];
	end
	if (
		( o_poutput_expected_prev[8] !== 1'bx ) && ( o_poutput_prev[8] !== o_poutput_expected_prev[8] )
		&& ((o_poutput_expected_prev[8] !== last_o_poutput_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_poutput[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_poutput_expected_prev);
		$display ("     Real value = %b", o_poutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_o_poutput_exp[8] = o_poutput_expected_prev[8];
	end
	if (
		( o_poutput_expected_prev[9] !== 1'bx ) && ( o_poutput_prev[9] !== o_poutput_expected_prev[9] )
		&& ((o_poutput_expected_prev[9] !== last_o_poutput_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_poutput[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_poutput_expected_prev);
		$display ("     Real value = %b", o_poutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_o_poutput_exp[9] = o_poutput_expected_prev[9];
	end
	if (
		( o_poutput_expected_prev[10] !== 1'bx ) && ( o_poutput_prev[10] !== o_poutput_expected_prev[10] )
		&& ((o_poutput_expected_prev[10] !== last_o_poutput_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_poutput[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_poutput_expected_prev);
		$display ("     Real value = %b", o_poutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_o_poutput_exp[10] = o_poutput_expected_prev[10];
	end
	if (
		( o_poutput_expected_prev[11] !== 1'bx ) && ( o_poutput_prev[11] !== o_poutput_expected_prev[11] )
		&& ((o_poutput_expected_prev[11] !== last_o_poutput_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_poutput[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_poutput_expected_prev);
		$display ("     Real value = %b", o_poutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_o_poutput_exp[11] = o_poutput_expected_prev[11];
	end
	if (
		( o_poutput_expected_prev[12] !== 1'bx ) && ( o_poutput_prev[12] !== o_poutput_expected_prev[12] )
		&& ((o_poutput_expected_prev[12] !== last_o_poutput_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_poutput[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_poutput_expected_prev);
		$display ("     Real value = %b", o_poutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_o_poutput_exp[12] = o_poutput_expected_prev[12];
	end
	if (
		( o_poutput_expected_prev[13] !== 1'bx ) && ( o_poutput_prev[13] !== o_poutput_expected_prev[13] )
		&& ((o_poutput_expected_prev[13] !== last_o_poutput_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_poutput[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_poutput_expected_prev);
		$display ("     Real value = %b", o_poutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_o_poutput_exp[13] = o_poutput_expected_prev[13];
	end
	if (
		( o_poutput_expected_prev[14] !== 1'bx ) && ( o_poutput_prev[14] !== o_poutput_expected_prev[14] )
		&& ((o_poutput_expected_prev[14] !== last_o_poutput_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_poutput[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_poutput_expected_prev);
		$display ("     Real value = %b", o_poutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_o_poutput_exp[14] = o_poutput_expected_prev[14];
	end
	if (
		( o_poutput_expected_prev[15] !== 1'bx ) && ( o_poutput_prev[15] !== o_poutput_expected_prev[15] )
		&& ((o_poutput_expected_prev[15] !== last_o_poutput_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_poutput[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_poutput_expected_prev);
		$display ("     Real value = %b", o_poutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_o_poutput_exp[15] = o_poutput_expected_prev[15];
	end
	if (
		( o_poutput_expected_prev[16] !== 1'bx ) && ( o_poutput_prev[16] !== o_poutput_expected_prev[16] )
		&& ((o_poutput_expected_prev[16] !== last_o_poutput_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_poutput[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_poutput_expected_prev);
		$display ("     Real value = %b", o_poutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_o_poutput_exp[16] = o_poutput_expected_prev[16];
	end
	if (
		( o_poutput_expected_prev[17] !== 1'bx ) && ( o_poutput_prev[17] !== o_poutput_expected_prev[17] )
		&& ((o_poutput_expected_prev[17] !== last_o_poutput_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_poutput[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_poutput_expected_prev);
		$display ("     Real value = %b", o_poutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_o_poutput_exp[17] = o_poutput_expected_prev[17];
	end
	if (
		( o_poutput_expected_prev[18] !== 1'bx ) && ( o_poutput_prev[18] !== o_poutput_expected_prev[18] )
		&& ((o_poutput_expected_prev[18] !== last_o_poutput_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_poutput[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_poutput_expected_prev);
		$display ("     Real value = %b", o_poutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_o_poutput_exp[18] = o_poutput_expected_prev[18];
	end
	if (
		( o_poutput_expected_prev[19] !== 1'bx ) && ( o_poutput_prev[19] !== o_poutput_expected_prev[19] )
		&& ((o_poutput_expected_prev[19] !== last_o_poutput_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_poutput[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_poutput_expected_prev);
		$display ("     Real value = %b", o_poutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_o_poutput_exp[19] = o_poutput_expected_prev[19];
	end
	if (
		( o_poutput_expected_prev[20] !== 1'bx ) && ( o_poutput_prev[20] !== o_poutput_expected_prev[20] )
		&& ((o_poutput_expected_prev[20] !== last_o_poutput_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_poutput[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_poutput_expected_prev);
		$display ("     Real value = %b", o_poutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_o_poutput_exp[20] = o_poutput_expected_prev[20];
	end
	if (
		( o_poutput_expected_prev[21] !== 1'bx ) && ( o_poutput_prev[21] !== o_poutput_expected_prev[21] )
		&& ((o_poutput_expected_prev[21] !== last_o_poutput_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_poutput[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_poutput_expected_prev);
		$display ("     Real value = %b", o_poutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_o_poutput_exp[21] = o_poutput_expected_prev[21];
	end
	if (
		( o_poutput_expected_prev[22] !== 1'bx ) && ( o_poutput_prev[22] !== o_poutput_expected_prev[22] )
		&& ((o_poutput_expected_prev[22] !== last_o_poutput_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_poutput[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_poutput_expected_prev);
		$display ("     Real value = %b", o_poutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_o_poutput_exp[22] = o_poutput_expected_prev[22];
	end
	if (
		( o_poutput_expected_prev[23] !== 1'bx ) && ( o_poutput_prev[23] !== o_poutput_expected_prev[23] )
		&& ((o_poutput_expected_prev[23] !== last_o_poutput_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_poutput[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_poutput_expected_prev);
		$display ("     Real value = %b", o_poutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_o_poutput_exp[23] = o_poutput_expected_prev[23];
	end
	if (
		( o_poutput_expected_prev[24] !== 1'bx ) && ( o_poutput_prev[24] !== o_poutput_expected_prev[24] )
		&& ((o_poutput_expected_prev[24] !== last_o_poutput_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_poutput[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_poutput_expected_prev);
		$display ("     Real value = %b", o_poutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_o_poutput_exp[24] = o_poutput_expected_prev[24];
	end
	if (
		( o_poutput_expected_prev[25] !== 1'bx ) && ( o_poutput_prev[25] !== o_poutput_expected_prev[25] )
		&& ((o_poutput_expected_prev[25] !== last_o_poutput_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_poutput[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_poutput_expected_prev);
		$display ("     Real value = %b", o_poutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_o_poutput_exp[25] = o_poutput_expected_prev[25];
	end
	if (
		( o_poutput_expected_prev[26] !== 1'bx ) && ( o_poutput_prev[26] !== o_poutput_expected_prev[26] )
		&& ((o_poutput_expected_prev[26] !== last_o_poutput_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_poutput[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_poutput_expected_prev);
		$display ("     Real value = %b", o_poutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_o_poutput_exp[26] = o_poutput_expected_prev[26];
	end
	if (
		( o_poutput_expected_prev[27] !== 1'bx ) && ( o_poutput_prev[27] !== o_poutput_expected_prev[27] )
		&& ((o_poutput_expected_prev[27] !== last_o_poutput_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_poutput[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_poutput_expected_prev);
		$display ("     Real value = %b", o_poutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_o_poutput_exp[27] = o_poutput_expected_prev[27];
	end
	if (
		( o_poutput_expected_prev[28] !== 1'bx ) && ( o_poutput_prev[28] !== o_poutput_expected_prev[28] )
		&& ((o_poutput_expected_prev[28] !== last_o_poutput_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_poutput[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_poutput_expected_prev);
		$display ("     Real value = %b", o_poutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_o_poutput_exp[28] = o_poutput_expected_prev[28];
	end
	if (
		( o_poutput_expected_prev[29] !== 1'bx ) && ( o_poutput_prev[29] !== o_poutput_expected_prev[29] )
		&& ((o_poutput_expected_prev[29] !== last_o_poutput_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_poutput[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_poutput_expected_prev);
		$display ("     Real value = %b", o_poutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_o_poutput_exp[29] = o_poutput_expected_prev[29];
	end
	if (
		( o_poutput_expected_prev[30] !== 1'bx ) && ( o_poutput_prev[30] !== o_poutput_expected_prev[30] )
		&& ((o_poutput_expected_prev[30] !== last_o_poutput_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_poutput[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_poutput_expected_prev);
		$display ("     Real value = %b", o_poutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_o_poutput_exp[30] = o_poutput_expected_prev[30];
	end
	if (
		( o_poutput_expected_prev[31] !== 1'bx ) && ( o_poutput_prev[31] !== o_poutput_expected_prev[31] )
		&& ((o_poutput_expected_prev[31] !== last_o_poutput_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_poutput[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_poutput_expected_prev);
		$display ("     Real value = %b", o_poutput_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_o_poutput_exp[31] = o_poutput_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module enreg32bit_vlg_vec_tst();
// constants                                           
// general purpose registers
reg i_clk;
reg i_clr;
reg i_enload;
reg [31:0] i_pinput;
// wires                                               
wire [31:0] o_poutput;

wire sampler;                             

// assign statements (if any)                          
enreg32bit i1 (
// port map - connection between master ports and signals/registers   
	.i_clk(i_clk),
	.i_clr(i_clr),
	.i_enload(i_enload),
	.i_pinput(i_pinput),
	.o_poutput(o_poutput)
);

// i_clk
initial
begin
	repeat(2)
	begin
		i_clk = 1'b0;
		i_clk = #200000 1'b1;
		# 200000;
	end
	i_clk = 1'b0;
end 

// i_clr
initial
begin
	i_clr = 1'b1;
end 

// i_enload
initial
begin
	i_enload = 1'b1;
end 
// i_pinput[ 31 ]
initial
begin
	i_pinput[31] = 1'b0;
	i_pinput[31] = #800000 1'b1;
end 
// i_pinput[ 30 ]
initial
begin
	i_pinput[30] = 1'b0;
end 
// i_pinput[ 29 ]
initial
begin
	i_pinput[29] = 1'b1;
end 
// i_pinput[ 28 ]
initial
begin
	i_pinput[28] = 1'b0;
	i_pinput[28] = #400000 1'b1;
	i_pinput[28] = #400000 1'b0;
end 
// i_pinput[ 27 ]
initial
begin
	i_pinput[27] = 1'b1;
end 
// i_pinput[ 26 ]
initial
begin
	i_pinput[26] = 1'b1;
	i_pinput[26] = #800000 1'b0;
end 
// i_pinput[ 25 ]
initial
begin
	i_pinput[25] = 1'b0;
	i_pinput[25] = #400000 1'b1;
end 
// i_pinput[ 24 ]
initial
begin
	i_pinput[24] = 1'b0;
	i_pinput[24] = #400000 1'b1;
	i_pinput[24] = #400000 1'b0;
end 
// i_pinput[ 23 ]
initial
begin
	i_pinput[23] = 1'b0;
	i_pinput[23] = #400000 1'b1;
	i_pinput[23] = #400000 1'b0;
end 
// i_pinput[ 22 ]
initial
begin
	i_pinput[22] = 1'b1;
	i_pinput[22] = #400000 1'b0;
end 
// i_pinput[ 21 ]
initial
begin
	i_pinput[21] = 1'b1;
end 
// i_pinput[ 20 ]
initial
begin
	i_pinput[20] = 1'b1;
end 
// i_pinput[ 19 ]
initial
begin
	i_pinput[19] = 1'b1;
	i_pinput[19] = #400000 1'b0;
end 
// i_pinput[ 18 ]
initial
begin
	i_pinput[18] = 1'b1;
	i_pinput[18] = #400000 1'b0;
	i_pinput[18] = #400000 1'b1;
end 
// i_pinput[ 17 ]
initial
begin
	i_pinput[17] = 1'b1;
end 
// i_pinput[ 16 ]
initial
begin
	i_pinput[16] = 1'b0;
	i_pinput[16] = #400000 1'b1;
	i_pinput[16] = #400000 1'b0;
end 
// i_pinput[ 15 ]
initial
begin
	i_pinput[15] = 1'b0;
end 
// i_pinput[ 14 ]
initial
begin
	i_pinput[14] = 1'b1;
	i_pinput[14] = #400000 1'b0;
end 
// i_pinput[ 13 ]
initial
begin
	i_pinput[13] = 1'b0;
	i_pinput[13] = #800000 1'b1;
end 
// i_pinput[ 12 ]
initial
begin
	i_pinput[12] = 1'b1;
end 
// i_pinput[ 11 ]
initial
begin
	i_pinput[11] = 1'b1;
	i_pinput[11] = #400000 1'b0;
end 
// i_pinput[ 10 ]
initial
begin
	i_pinput[10] = 1'b1;
	i_pinput[10] = #400000 1'b0;
	i_pinput[10] = #400000 1'b1;
end 
// i_pinput[ 9 ]
initial
begin
	i_pinput[9] = 1'b0;
	i_pinput[9] = #800000 1'b1;
end 
// i_pinput[ 8 ]
initial
begin
	i_pinput[8] = 1'b1;
	i_pinput[8] = #400000 1'b0;
	i_pinput[8] = #400000 1'b1;
end 
// i_pinput[ 7 ]
initial
begin
	i_pinput[7] = 1'b0;
	i_pinput[7] = #400000 1'b1;
end 
// i_pinput[ 6 ]
initial
begin
	i_pinput[6] = 1'b0;
end 
// i_pinput[ 5 ]
initial
begin
	i_pinput[5] = 1'b0;
	i_pinput[5] = #400000 1'b1;
end 
// i_pinput[ 4 ]
initial
begin
	i_pinput[4] = 1'b0;
	i_pinput[4] = #400000 1'b1;
end 
// i_pinput[ 3 ]
initial
begin
	i_pinput[3] = 1'b1;
end 
// i_pinput[ 2 ]
initial
begin
	i_pinput[2] = 1'b0;
	i_pinput[2] = #400000 1'b1;
	i_pinput[2] = #400000 1'b0;
end 
// i_pinput[ 1 ]
initial
begin
	i_pinput[1] = 1'b1;
	i_pinput[1] = #400000 1'b0;
end 
// i_pinput[ 0 ]
initial
begin
	i_pinput[0] = 1'b1;
	i_pinput[0] = #800000 1'b0;
end 

enreg32bit_vlg_sample_tst tb_sample (
	.i_clk(i_clk),
	.i_clr(i_clr),
	.i_enload(i_enload),
	.i_pinput(i_pinput),
	.sampler_tx(sampler)
);

enreg32bit_vlg_check_tst tb_out(
	.o_poutput(o_poutput),
	.sampler_rx(sampler)
);
endmodule

